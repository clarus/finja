noprop ERR1, ERR2, ERR3, ERR4, ERR5, ERR6, ERR7, ERR8, ERR9 ;
noprop M, e, r, R1, R2, R3, R4 ;
prime p, q ;

dp := { e^-1 mod (p-1) } ;
dq := { e^-1 mod (q-1) } ;
iq := { q^-1 mod p } ;

pp := p * r * r ;
Mp := M mod pp ;
ipr := p^-1 mod (r * r) ;
Bp := p * ipr ;
Ap := 1 - Bp mod pp ;
MMp := Ap * Mp + Bp * (1 + r) mod pp ;

if MMp !=[p] M abort with ERR1 ;

ddp := dp + R1 * (p - 1) ;
Spr := MMp^ddp mod pp ;

if ddp !=[p - 1] dp abort with ERR2 ;

if Bp * Spr !=[pp] Bp * (1 + ddp * r) abort with ERR3 ;

SSp := Spr - Bp * (1 + ddp * r - R3) ;
qq := q * r * r ;
Mq := M mod qq ;
iqr := q^-1 mod (r * r) ;
Bq := q * iqr ;
Aq := 1 - Bq mod qq ;
MMq := Aq * Mq + Bq * (1 + r) mod qq ;

if MMq !=[q] M abort with ERR4 ;

if Mp !=[r * r] Mq abort with ERR5 ;

ddq := dq + R2 * (q - 1) ;
Sqr := MMq^ddq mod qq ;

if ddq !=[q - 1] dq abort with ERR6 ;

if Bq * Sqr !=[qq] Bq * (1 + ddq * r) abort with ERR7 ;

SSq := Sqr - Bq * (1 + ddq * r - R4) ;
S := SSq + q * (iq * (SSp - SSq) mod pp) ;
N := p * q ;

if N * (S - R4 - q * (iq * (R3 - R4))) !=[N * r * r] 0 abort with ERR8 ;

if q * iq !=[p] 1 abort with ERR9 ;

return S mod N ;

%%

_ != @ /\ ( _ =[p] @ \/ _ =[q] @ )
